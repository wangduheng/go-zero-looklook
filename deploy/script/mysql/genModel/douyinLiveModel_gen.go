// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	douyinLiveFieldNames          = builder.RawFieldNames(&DouyinLive{})
	douyinLiveRows                = strings.Join(douyinLiveFieldNames, ",")
	douyinLiveRowsExpectAutoSet   = strings.Join(stringx.Remove(douyinLiveFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	douyinLiveRowsWithPlaceHolder = strings.Join(stringx.Remove(douyinLiveFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookTiktok1DouyinLiveIdPrefix = "cache:looklookTiktok1:douyinLive:id:"
)

type (
	douyinLiveModel interface {
		Insert(ctx context.Context, data *DouyinLive) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DouyinLive, error)
		Update(ctx context.Context, data *DouyinLive) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDouyinLiveModel struct {
		sqlc.CachedConn
		table string
	}

	DouyinLive struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		OpenUrl    string    `db:"open_url"` // 分享链接
		Info       string    `db:"info"`     // 礼包信息
		Name       string    `db:"name"`     // 主播
	}
)

func newDouyinLiveModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDouyinLiveModel {
	return &defaultDouyinLiveModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`douyin_live`",
	}
}

func (m *defaultDouyinLiveModel) Delete(ctx context.Context, id int64) error {
	looklookTiktok1DouyinLiveIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1DouyinLiveIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookTiktok1DouyinLiveIdKey)
	return err
}

func (m *defaultDouyinLiveModel) FindOne(ctx context.Context, id int64) (*DouyinLive, error) {
	looklookTiktok1DouyinLiveIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1DouyinLiveIdPrefix, id)
	var resp DouyinLive
	err := m.QueryRowCtx(ctx, &resp, looklookTiktok1DouyinLiveIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", douyinLiveRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDouyinLiveModel) Insert(ctx context.Context, data *DouyinLive) (sql.Result, error) {
	looklookTiktok1DouyinLiveIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1DouyinLiveIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, douyinLiveRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OpenUrl, data.Info, data.Name)
	}, looklookTiktok1DouyinLiveIdKey)
	return ret, err
}

func (m *defaultDouyinLiveModel) Update(ctx context.Context, data *DouyinLive) error {
	looklookTiktok1DouyinLiveIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1DouyinLiveIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, douyinLiveRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OpenUrl, data.Info, data.Name, data.Id)
	}, looklookTiktok1DouyinLiveIdKey)
	return err
}

func (m *defaultDouyinLiveModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookTiktok1DouyinLiveIdPrefix, primary)
}

func (m *defaultDouyinLiveModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", douyinLiveRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDouyinLiveModel) tableName() string {
	return m.table
}