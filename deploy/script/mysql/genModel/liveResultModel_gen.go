// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	liveResultFieldNames          = builder.RawFieldNames(&LiveResult{})
	liveResultRows                = strings.Join(liveResultFieldNames, ",")
	liveResultRowsExpectAutoSet   = strings.Join(stringx.Remove(liveResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	liveResultRowsWithPlaceHolder = strings.Join(stringx.Remove(liveResultFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookTiktok1LiveResultIdPrefix = "cache:looklookTiktok1:liveResult:id:"
)

type (
	liveResultModel interface {
		Insert(ctx context.Context, data *LiveResult) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LiveResult, error)
		Update(ctx context.Context, data *LiveResult) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLiveResultModel struct {
		sqlc.CachedConn
		table string
	}

	LiveResult struct {
		Id   int64  `db:"id"`
		Uid  int64  `db:"uid"`
		Lid  int64  `db:"lid"`
		Name string `db:"name"`
	}
)

func newLiveResultModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLiveResultModel {
	return &defaultLiveResultModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`live_result`",
	}
}

func (m *defaultLiveResultModel) withSession(session sqlx.Session) *defaultLiveResultModel {
	return &defaultLiveResultModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`live_result`",
	}
}

func (m *defaultLiveResultModel) Delete(ctx context.Context, id int64) error {
	looklookTiktok1LiveResultIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1LiveResultIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookTiktok1LiveResultIdKey)
	return err
}

func (m *defaultLiveResultModel) FindOne(ctx context.Context, id int64) (*LiveResult, error) {
	looklookTiktok1LiveResultIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1LiveResultIdPrefix, id)
	var resp LiveResult
	err := m.QueryRowCtx(ctx, &resp, looklookTiktok1LiveResultIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", liveResultRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLiveResultModel) Insert(ctx context.Context, data *LiveResult) (sql.Result, error) {
	looklookTiktok1LiveResultIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1LiveResultIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, liveResultRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Lid, data.Name)
	}, looklookTiktok1LiveResultIdKey)
	return ret, err
}

func (m *defaultLiveResultModel) Update(ctx context.Context, data *LiveResult) error {
	looklookTiktok1LiveResultIdKey := fmt.Sprintf("%s%v", cacheLooklookTiktok1LiveResultIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, liveResultRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Lid, data.Name, data.Id)
	}, looklookTiktok1LiveResultIdKey)
	return err
}

func (m *defaultLiveResultModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookTiktok1LiveResultIdPrefix, primary)
}

func (m *defaultLiveResultModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", liveResultRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLiveResultModel) tableName() string {
	return m.table
}
